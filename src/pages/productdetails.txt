import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from '../utils/axios';
import Modal from 'react-modal';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useAuth } from '../context/AuthContext';

Modal.setAppElement('#root');

const ProductDetails = () => {
  const { id } = useParams();
  const { user } = useAuth();

  const [product, setProduct] = useState(null);
  const [activeImage, setActiveImage] = useState(0);
  const [quantity, setQuantity] = useState(1);
  const [isAdding, setIsAdding] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const [comment, setComment] = useState('');
  const [rating, setRating] = useState(5);
  const [submittingReview, setSubmittingReview] = useState(false);

  useEffect(() => {
    fetchProduct();
  }, [id]);

  const fetchProduct = async () => {
    try {
      const res = await axios.get(`/api/products/${id}`);
      setProduct(res.data);
    } catch {
      toast.error('Failed to load product');
    }
  };

  const handleQuantityChange = (value) => {
    if (value < 1) return;
    setQuantity(value);
  };

  const addToCart = async () => {
    if (!product) return;
    setIsAdding(true);
    try {
      const res = await axios.post('/api/cart/add', {
        productId: product._id,
        name: product.name,
        price: product.price,
        image: product.images[0],
        category: product.category,
        quantity,
      });
      if (res.status === 201) toast.success('Added to cart!');
      else toast.error('Failed to add to cart');
    } catch {
      toast.error('Failed to add to cart');
    }
    setIsAdding(false);
  };

  const submitReview = async () => {
    if (!comment.trim()) return toast.error('Please enter a comment');

    try {
      setSubmittingReview(true);
      await axios.post(`/api/products/${id}/review`, {
        comment,
        rating,
      });

      toast.success('Review submitted!');
      setComment('');
      setRating(5);
      fetchProduct(); // refresh product + reviews
    } catch (err) {
      toast.error(err.response?.data?.message || 'Error submitting review');
    } finally {
      setSubmittingReview(false);
    }
  };

  if (!product) return null;

  return (
    <div className="container mx-auto p-6 md:p-8 mt-6">
      <ToastContainer position="top-right" autoClose={500} hideProgressBar />

      <div className="flex flex-col lg:flex-row gap-22">
        {/* Left Column - Product Images */}
        <div className="lg:w-1/2">
          <div className="relative w-full h-[400px] rounded-lg overflow-hidden shadow-lg cursor-pointer">
            <img
              src={product.images?.[activeImage]}
              alt={`Product ${activeImage + 1}`}
              className="w-full h-full object-cover transition-all duration-300 transform hover:scale-105"
            />
          </div>
          <div className="mt-4 grid grid-cols-3 gap-2 overflow-x-auto">
            {product.images?.map((img, idx) => (
              <img
                key={idx}
                src={img}
                onClick={() => setActiveImage(idx)}
                className={`w-full h-40 object-cover rounded-md transition-all duration-300 cursor-pointer ${
                  idx === activeImage
                    ? 'border-blue-600 shadow-md'
                    : 'border-gray-200'
                }`}
                alt={`Thumbnail ${idx}`}
              />
            ))}
          </div>
        </div>

        {/* Right Column - Product Details */}
        <div className="lg:w-1/2 space-y-6">
          <h1 className="text-4xl font-semibold text-gray-900 leading-tight">
            {product.name}
          </h1>

          <div className="flex items-center gap-2 text-yellow-500 text-lg">
            {Array.from({ length: 5 }).map((_, i) => (
              <span key={i}>
                {i < Math.round(product.rating || 0) ? '★' : '☆'}
              </span>
            ))}
            <span className="text-gray-600 text-sm ml-1">
              ({product.numReviews || 0} reviews)
            </span>
          </div>

          <p className="text-gray-600 text-base">{product.description}</p>

          <div className="text-2xl font-semibold text-green-600">
            ₹{product.price}
          </div>

          <div className="text-sm text-gray-500">Category: {product.category}</div>

          {/* Quantity Selector */}
          <div className="flex items-center gap-3">
            <span className="text-sm font-medium">Quantity:</span>
            <button
              onClick={() => handleQuantityChange(quantity - 1)}
              className="px-3 py-1 bg-gray-200 rounded-lg hover:bg-gray-300 disabled:opacity-50"
              disabled={quantity === 1}
            >
              -
            </button>
            <input
  type="number"
  value={quantity}
  onChange={(e) => handleQuantityChange(parseInt(e.target.value) || 1)}
  min="1"
  className="w-14 text-center border border-gray-300 rounded-lg"
/>

            <button
              onClick={() => handleQuantityChange(quantity + 1)}
              className="px-3 py-1 bg-gray-200 rounded-lg hover:bg-gray-300"
            >
              +
            </button>
          </div>

          {/* Add to Cart or Out of Stock Button */}
          {product.inStock > 0 ? (
            <button
              onClick={addToCart}
              disabled={isAdding}
              className="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-all disabled:opacity-50 mt-4"
            >
              {isAdding ? 'Adding...' : 'Add to Cart'}
            </button>
          ) : (
            <button
              disabled
              className="w-full bg-gray-400 text-white py-3 rounded-lg font-medium disabled:opacity-50 mt-4"
            >
              Out of Stock
            </button>
          )}

          {/* Review Form */}
          {user && (
            <div className="bg-white p-6 mt-8 rounded-lg shadow-lg">
              <h3 className="text-lg font-semibold mb-3">Write a Review</h3>

              <div className="flex gap-1 mb-4">
                {Array.from({ length: 5 }).map((_, i) => (
                  <button
                    key={i}
                    onClick={() => setRating(i + 1)}
                    className={`text-2xl ${i < rating ? 'text-yellow-500' : 'text-gray-300'}`}
                  >
                    ★
                  </button>
                ))}
              </div>

              <textarea
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                rows="4"
                placeholder="Write your review..."
                className="w-full border border-gray-300 rounded-lg p-4 text-sm"
              />

              <button
                onClick={submitReview}
                disabled={submittingReview}
                className="mt-4 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-all disabled:opacity-50"
              >
                {submittingReview ? 'Submitting...' : 'Submit Review'}
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Reviews Section */}
      {product.reviews?.length > 0 && (
        <div className="mt-12 max-w-4xl mx-auto">
          <h3 className="text-2xl font-bold mb-6">Customer Reviews</h3>
          <div className="space-y-6">
            {product.reviews.map((review, idx) => (
              <div key={idx} className="bg-white border rounded-lg p-6 shadow-sm">
                <div className="flex justify-between items-center mb-2">
                  <p className="font-semibold text-sm">{review.name}</p>
                  <div className="text-yellow-500 text-sm">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <span key={i}>{i < review.rating ? '★' : '☆'}</span>
                    ))}
                  </div>
                </div>
                <p className="text-gray-700 text-sm">{review.comment}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Fullscreen Image Modal */}
      <Modal
        isOpen={isModalOpen}
        onRequestClose={() => setIsModalOpen(false)}
        className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50"
      >
        <div className="relative w-3/4 md:w-1/2 bg-white p-6 rounded-lg shadow-lg">
          <button
            onClick={() => setIsModalOpen(false)}
            className="absolute top-3 right-3 text-xl text-gray-700"
          >
            ×
          </button>
          <img
            src={product.images?.[activeImage]}
            alt={`Product ${activeImage + 1}`}
            className="w-full h-[500px] object-contain"
          />
        </div>
      </Modal>
    </div>
  );
};

export default ProductDetails;
